llength([],0).
llength([_|T], N) :- llength(T, Nt), N is Nt + 1.

printall(Header, G) :-
    writeln(''),
    writeln('---------------------------------------------------------------------------------------------------------------------------'),
    writeln(Header),
    writeln('---------------------------------------------------------------------------------------------------------------------------'),
    call(G),
    writeln(G),
    fail
    ;
    true.

% count including duplicates
count(Goal, Count) :-
    findall(_, Goal, List),
    llength(List, Count).

% remove duplicates from a list.
member1(X,[H|_]) :- 
    X==H,!.
member1(X,[_|T]) :- 
    member1(X,T).

remove_duplicates([],[]).       
remove_duplicates([H|T],X) :- 
    member1(H,T),                
    !,                          
    remove_duplicates(T,X).     

remove_duplicates([H|T],[H|X]) :- 
    remove_duplicates(T,X).

% remove duplicates and cont concerned about order
member(X, [Y|T]) :- X = Y; member(X, T).
toSet(List, Set) :-
	toSetHelper(List, [], Set).
toSetHelper([], Acc, Acc).
toSetHelper([H|T], Acc, Set) :-
	member(H, Acc),
	toSetHelper(T, Acc, Set).
toSetHelper([H|T], Acc, Set) :-
	toSetHelper(T, [H|Acc], Set).



% count after removing duplicates
unique_count(Goal, UniqueCount) :-
    findall(_, Goal, List),
	toSet(List, UniqueList),
    llength(UniqueList, UniqueCount).


% rules created for logging queries 

% RULE: log_template_variable_name(LogTemplateID, PortID, EntryTemplate, LogVariableID, VariableName, LogAnnotationID)
:- table log_template_variable_name/6.
log_template_variable_name(LogTemplateID, PortID, EntryTemplate, LogVariableID, VariableName, LogAnnotationID) :-
    log_template(LogTemplateID, PortID, EntryTemplate, LogAnnotationID),
	log_template_variable(LogVariableID, VariableName, LogTemplateID).

% RULE: log_template_variable_name_value(ResourceID, LogTemplateID, EntryTemplate, LogEntryID, LogVariableID, VariableName, LogVariableValue). 
:- table log_template_variable_name_value/7.
log_template_variable_name_value(ResourceID, LogTemplateID, EntryTemplate, LogEntryID, LogVariableID, VariableName, LogVariableValue) :-
	log_template_variable_name(LogTemplateID, _, EntryTemplate, LogVariableID, VariableName, _),
	log_variable_value(ResourceID, LogEntryID, LogVariableID, LogVariableValue).

% RULE: log_record_result(RecordID, ResourceID, FinalResult)
:- table log_record_result/3.
log_record_result(RecordID, ResourceID, FinalResult) :-
	log_template_variable_name_value(ResourceID, LogTemplateID, '{timestamp} {final_result} the record {RecordID}', LogEntryID, _, 'final_result', FinalResult),
	log_template_variable_name_value(_, LogTemplateID, _, LogEntryID, _, 'RecordID', RecordID).

% RULE: log_entry_resource(ResourceID, LogEntryID)
:- table log_entry_resource/2.
log_entry_resource(ResourceID, LogEntryID) :-
	log_variable_value(ResourceID, LogEntryID, _, _).


% RULE: record_update(RecordID, UpdatedFieldName, OldValue, NewValue)
:- table record_update/4. 
record_update(RecordID, UpdatedFieldName, OldValue, NewValue) :-
	log_template_variable_name_value(_, _, '{timestamp} UPDATING record {RecordID}: {field_name} from <{original_value}> to <{updated_value}>', LogEntryID, _, 'RecordID', RecordID),
	log_template_variable_name_value(_, _, '{timestamp} UPDATING record {RecordID}: {field_name} from <{original_value}> to <{updated_value}>', LogEntryID, _, 'field_name', UpdatedFieldName),
	log_template_variable_name_value(_, _, '{timestamp} UPDATING record {RecordID}: {field_name} from <{original_value}> to <{updated_value}>', LogEntryID, _, 'original_value', OldValue),
	log_template_variable_name_value(_, _, '{timestamp} UPDATING record {RecordID}: {field_name} from <{original_value}> to <{updated_value}>', LogEntryID, _, 'updated_value', NewValue).



